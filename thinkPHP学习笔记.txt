一、配置
    A).配置类型/目录
    
      1.默认配置（惯例配置）
          应用配置文件位置：./thinkphp_5.0.9_full/application/config.php，应用配置文件，在没有做过任何配置的情况下，改配置文件和惯例配置文件应该是一致的。
      惯例配置文件的路径是./thinkphp_5.0.9_full/thinkphp/convention.php，通常不建议用户修改该文件内容。
          
      2.自定义配置
          需要在入口文件新增CONF_PATH系统常量，再根据常量的路径新增config.php即可，如：define('CONF_PATH', __DIR__.'/../application/config/')。上面新增的
      这个config.php文件是自定义的应用配置文件，一旦定义了该配置，以后框架的配置都需要通过该目录中的配置文件进行配置。
          自定义目录（CONF_PATH）下也可以针对模块设置，如$CONF_PATH\index\config.php是和应用目录下的index模块进行绑定的配置文件，文件中定义的配置项除了
      index模块外，其他模块是无法获取的。

      3.扩展配置
          可在自定义配置目录（CONF_PATH）下新建extra目录作为扩展配置的目录，文件名就是配置项的名称，文件内容就是配置项的值，如下：
          studeng.php
          <<<
          return [
            'name' => '毛俊'
          ];
          上面的文件创建后，就会新增配置项student，文件中返回的数组就是student配置项的值。也可以在“$CONF_PATH\模块名”目录下创建extra目录，其中定义的配置内容
      只属于该模块，其他模块无法访问。
      
      4.场景配置
          编辑应用或模块配置中的app_status配置项为场景名称，如'app_status'=>'home'，在这里场景名称为home，创建与该配置文件同级的配置文件“场景名称.php”并在其中
      配置需要的配置项即可。场景配置支持应用配置、模块配置，但不支持扩展配置。场景配置适用于不同场景下使用不同数据库的情况，可根据自己的需求灵活应用（不仅限于
      数据库）。
      
      5.模块配置
          模块配置可以拥有自己的配置文件、独立配置文件和场景配置文件，模块配置的优先级高于应用配置并最终会覆盖掉应用配置中的同名项，其默认的配置文件名是config.php。
          模块默认的独立配置文件有两个，database.php、validate.php，模块配置文件也支持场景配置。
          
      6.独立配置
          独立配置有2种，“用户自定义”、“系统默认”。用户自定义的独立配置文件必须放在应用或者模块的extra目录下，系统默认的配置文件主要有2个：数据库配置“database.php”和
      验证规则配置“validate.php”，这两个文件系统会在应用或模块目录下自动查找并加载，它们可以放在应用或模块的extra目录下，也可放在应用或模块的目录下，如果放在应用或模
      块的extra目录下其优先级大于放在应用或模块的目录下，在应用或模块的extra目录下的php文件系统会自动加载为配置项（文件的名称），其值为文件返回的数组。注意：应用或模
      块目录受CONF_PATH配置项影响。无论是用户自定义还是系统默认的独立配置文件，其文件名就是配置项名称，文件返回一个数组，需要注意的是：独立配置全都是二级配置。
          
      7.其他配置
          配置文件不一定是自定义配置文件、场景配置文件、扩展配置文件，它可以是任意目录下的任意名称的配置文件，要加载这些配置文件，需要\\think\Config类的静态方法“load”和
      “parse”，这两个方法都是返回数组类型，并将配合应用到内存中，这里有两种情况：
          （1）如果配置文件是php文件，那么可直接调用\think\Config::load('配置文件绝对路径')即可
          （2）如果配置文件是ini、xml或json类型，那么可直接调用\think\Config::parse('配置文件绝对路径', 'ini')
      
    B).配置文件类型
      配置文件有4中类型，分别是.php 、.ini 、 .xml 、.json四种，其中php、xml、json均支持二级，使用前必须在入口文件中定义CONF_EXT常量，如：define('CONF_EXT', '.ini')。
      1.php
        return [
          'xxx':'ooo'
        ];
      2.ini （注释写在分号后面）
        key1 = value1 ;这是注释
        key2 = value2
      3.xml
        <任意标签名>
          <配置项名称>配置值</配置项名称>
        </任意标签名>
      4.json
        {
          'name':'朱老师',
          'age':45
        }
        
        
    C).读取配置
        通过\think\Config::get('配置项名称')或者助手函数config('配置项名称')可以获得一个配置的值，如果遇到二级配置项可用“.”来读取，如下:
            'student'=>[
                 'name'=>'jimmy'
            ]
            上面的二级配置中的name配置项可以用config('student.name')来读取。
        通过\think\Config::has('配置项名称')或助手函数config('?配置项名称')，可以判断某配置项是否存在，返回bool类型的值。
    
    
    D).设置配置
        通过\think\Config::set('配置项名称', '值')来对内存中的配置项修改（覆盖）或配置（优先级最高的配置方式），批量完成相同的操作可使用数组实参来替换值实参，如：
            #批量一级配置
            \think\Config::set([
                 '配置1'=>'值1',
                 '配置2'=>'值2',
                 '配置n'=>'值n'
            ])
            
            #二级配置
            \think\Config::set('二级配置项名称', [
                 '配置1'=>'值1',
                 '配置2'=>'值2',
                 '配置n'=>'值n'
            ])
          
            注：助手函数config也可以完成上面操作，接受的参数和set方法完全一致，照搬即可。
    
    
    E).配置文件加载的优先级
        理论：动态配置 > 模块配置 > 引用配置 > 管理配置
        应用配置中：场景配置 > 独立配置 > 应用配置
        模块配置中：场景配置 > 独立配置 > 模块配置
        
        
        
    F).配置的作用域（没理解，感觉没有实际作用）
        作用域就是二级配置的配置项名称，可用\think\Config::set(数组, '作用域')来进行配置，如：
            \think\Config::set([
						    'name'=>'毛军',
						    'age'=>31
            ], 'student')
            上面会往内存中新增一个名叫student的二级配置。
            \think\Config::set('student.name', '甘小青')
            上面会吧student作用域中的name配置更改为'甘小青'
    
				例子：
					// 导入my_config.php中的配置参数，并纳入user作用域
					Config::load('my_config.php','','user'); 
					// 解析并导入my_config.ini 中的配置参数，读入test作用域
					Config::parse('my_config.ini','ini','test'); 
					// 设置user_type参数，并纳入user作用域
					Config::set('user_type',1,'user'); 
					// 批量设置配置参数，并纳入test作用域
					Config::set($config,'test'); 
					// 读取user作用域的user_type配置参数
					echo Config::get('user_type','user'); 
					// 读取user作用域下面的所有配置参数
					dump(Config::get('','user')); 
					dump(config('',null,'user')); // 同上
					// 判断在test作用域下面是否存在user_type参数
					Config::has('user_type','test'); 
    
    
    
    
    
    